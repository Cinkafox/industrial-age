using Content.Shared.PlayerIndicator;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.UserInterface.Systems.Indicators.Controls;

[GenerateTypedNameReferences]
public sealed partial class PlayerIndicator : Control
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    
    private readonly Dictionary<EntityUid, IndicatorProgressBar> _bars = new();
    private readonly Dictionary<string, EntityUid> _indicatorsContains = new();
    
    private readonly EntityQuery<MetaDataComponent> _metaDataQuery;
    private readonly EntityQuery<IndicatorEntryComponent> _indicatorQuery;
    
    public PlayerIndicator()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        
        _indicatorQuery = _entityManager.GetEntityQuery<IndicatorEntryComponent>();
        _metaDataQuery = _entityManager.GetEntityQuery<MetaDataComponent>();
        
        UserInterfaceManager.GetUIController<IndicatorUIController>().Register(this);
    }
    
    public void ClearIndicators()
    {
        BarContainer.Children.Clear();
        _bars.Clear();
    }

    private IndicatorProgressBar AddBar(EntityUid uid)
    {
        var name = _metaDataQuery.GetComponent(uid).EntityName;
        var bar = new IndicatorProgressBar();
        bar.IndicatorName = name;
        bar.MaxValue = _indicatorQuery.GetComponent(uid).MaxValue;
        _bars[uid] = bar;
        _indicatorsContains.Add(name, uid);
        BarContainer.AddChild(bar);
        return bar;
    }

    public void UpdateValue(EntityUid uid)
    {
        if (!_indicatorQuery.TryGetComponent(uid, out var indicatorEntryComp))
        {
            if (_bars.TryGetValue(uid, out var i))
                BarContainer.RemoveChild(i);
            _bars.Remove(uid);
            
            return;
        }
        
        var name = _metaDataQuery.GetComponent(uid).EntityName;
        if(_indicatorsContains.TryGetValue(name, out var indicatorUid) && indicatorUid != uid) 
            return;
        
        if (!_bars.TryGetValue(uid, out var indicatorProgressBar))
            indicatorProgressBar = AddBar(uid);
        
        var value = indicatorEntryComp.Value;
        
        if (value > indicatorProgressBar.MaxValue)
            indicatorProgressBar.MaxValue = value;
        
        indicatorProgressBar.Value = value;
    }
}